@page "/detect"
@using LZS_Web.Services
@inject PhyreEngineService PhyreService
@inject FileProcessingService FileService

<PageTitle>Detect Format - LZS Phyre Engine Tool</PageTitle>

<div class="container-fluid">
    <h1>üëÅÔ∏è Detect File Format</h1>
    <p class="lead">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="@OnFileSelected" class="form-control" maxAllowedSize="100_000_000" />
                    @if (!string.IsNullOrEmpty(fileName))
                    {
                        <div class="mt-3">
                            <div class="alert alert-success">
                                <strong>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:</strong> @fileName<br/>
                                <strong>–†–∞–∑–º–µ—Ä:</strong> @FileService.GetFileSize(fileSize)
                            </div>
                        </div>
                    }
                    <small class="text-muted">
                        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã: .phyre, .fnt, .dds, .gtf, .png, .json –∏ –¥—Ä—É–≥–∏–µ
                    </small>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(filePath))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç</h5>
                    </div>
                    <div class="card-body">
                        <button class="btn btn-primary" @onclick="StartDetection" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-6">
            @if (isProcessing)
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üîÑ –ê–Ω–∞–ª–∏–∑...</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                        </div>
                        <p class="mt-2">–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞...</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(resultOutput))
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞</h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3 rounded">@resultOutput</pre>
                        
                        @if (hasError)
                        {
                            <div class="alert alert-danger mt-3">
                                <strong>–û—à–∏–±–∫–∞:</strong> @resultError
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success mt-3">
                                <strong>–§–æ—Ä–º–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!</strong>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>üìÅ Phyre Engine</h6>
                            <ul>
                                <li><strong>PhyreFont:</strong> –®—Ä–∏—Ñ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã</li>
                                <li><strong>PhyreModel:</strong> 3D –º–æ–¥–µ–ª–∏</li>
                                <li><strong>PhyreTexture:</strong> –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∞—Ä—Ö–∏–≤—ã</li>
                                <li><strong>–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:</strong> –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞—Ç—É—Ä –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üñºÔ∏è –¢–µ–∫—Å—Ç—É—Ä—ã</h6>
                            <ul>
                                <li><strong>GTF:</strong> Sony GTF —Ñ–æ—Ä–º–∞—Ç</li>
                                <li><strong>DDS:</strong> DirectDraw Surface</li>
                                <li><strong>PNG:</strong> Portable Network Graphics</li>
                                <li><strong>JPEG:</strong> Joint Photographic Experts Group</li>
                            </ul>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <h6>üìù –®—Ä–∏—Ñ—Ç—ã</h6>
                            <ul>
                                <li><strong>BMFont:</strong> .fnt —Ñ–∞–π–ª—ã</li>
                                <li><strong>Custom Font:</strong> –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã</li>
                                <li><strong>Raw Font:</strong> –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç–æ–≤</li>
                                <li><strong>Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</strong> –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üîç –î—Ä—É–≥–∏–µ</h6>
                            <ul>
                                <li><strong>JSON:</strong> JavaScript Object Notation</li>
                                <li><strong>TGA:</strong> Truevision Graphics Adapter</li>
                                <li><strong>BMP:</strong> Bitmap –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
                                <li><strong>Unknown:</strong> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string filePath = string.Empty;
    private string fileName = string.Empty;
    private long fileSize = 0;
    private bool isProcessing = false;
    private string resultOutput = string.Empty;
    private string resultError = string.Empty;
    private bool hasError = false;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                filePath = await FileService.SaveBrowserFileAsync(e.File);
                fileName = e.File.Name;
                fileSize = e.File.Size;
                ClearResults();
            }
            catch (Exception ex)
            {
                resultError = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {ex.Message}";
                hasError = true;
            }
        }
    }

    private async Task StartDetection()
    {
        if (string.IsNullOrEmpty(filePath))
            return;

        isProcessing = true;
        ClearResults();

        try
        {
            var result = await PhyreService.DetectFormatAsync(filePath);

            resultOutput = result.Output;
            resultError = result.Error;
            hasError = !result.Success;
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: {ex.Message}";
            hasError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ClearResults()
    {
        resultOutput = string.Empty;
        resultError = string.Empty;
        hasError = false;
    }
}

@page "/pack"
@using LZS_Web.Services
@inject PhyreEngineService PhyreService
@inject FileProcessingService FileService
@inject IJSRuntime JSRuntime

<PageTitle>Pack - LZS Phyre Engine Tool</PageTitle>

<div class="container-fluid">
    <h1>üîß Pack Phyre Files</h1>
    <p class="lead">–£–ø–∞–∫–æ–≤–∫–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –∏ —Ç–µ–∫—Å—Ç—É—Ä –æ–±—Ä–∞—Ç–Ω–æ –≤ .phyre —Ñ–∞–π–ª—ã</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ BMFont —Ñ–∞–π–ª (.fnt)</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="@OnFntFileSelected" accept=".fnt" class="form-control" maxAllowedSize="100_000_000" />
                    @if (!string.IsNullOrEmpty(fntFileName))
                    {
                        <div class="mt-3">
                            <div class="alert alert-success">
                                <strong>BMFont –∑–∞–≥—Ä—É–∂–µ–Ω:</strong> @fntFileName<br/>
                                <strong>–†–∞–∑–º–µ—Ä:</strong> @FileService.GetFileSize(fntFileSize)
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5>2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç—É—Ä—É</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="@OnTextureFileSelected" accept=".dds,.gtf,.png" class="form-control" maxAllowedSize="100_000_000" />
                    @if (!string.IsNullOrEmpty(textureFileName))
                    {
                        <div class="mt-3">
                            <div class="alert alert-success">
                                <strong>–¢–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:</strong> @textureFileName<br/>
                                <strong>–†–∞–∑–º–µ—Ä:</strong> @FileService.GetFileSize(textureFileSize)<br/>
                                <strong>–§–æ—Ä–º–∞—Ç:</strong> @FileService.GetFileExtension(textureFileName).ToUpper()
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(fntFilePath) && !string.IsNullOrEmpty(textureFilePath))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø–∞–∫–æ–≤–∫–∏</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label class="form-label">–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:</label>
                            <input type="text" @bind="outputFileName" class="form-control" placeholder="font_modified.phyre" />
                        </div>

                        <div class="form-group mb-3">
                            <label class="form-label">–û–ø–µ—Ä–∞—Ü–∏–∏:</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="autoConvertTexture" id="autoConvert">
                                <label class="form-check-label" for="autoConvert">
                                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PNG –≤ DDS/GTF
                                </label>
                            </div>
                        </div>

                        <button class="btn btn-primary" @onclick="StartPacking" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            –ù–∞—á–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-6">
            @if (isProcessing)
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                        </div>
                        <p class="mt-2">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(resultOutput))
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ø–∞–∫–æ–≤–∫–∏</h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3 rounded">@resultOutput</pre>
                        
                        @if (hasError)
                        {
                            <div class="alert alert-danger mt-3">
                                <strong>–û—à–∏–±–∫–∞:</strong> @resultError
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success mt-3">
                                <strong>–£—Å–ø–µ—à–Ω–æ!</strong> –£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
                            </div>
                        }
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(packedFilePath) && File.Exists(packedFilePath))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>üì¶ –£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@Path.GetFileName(packedFilePath)</strong><br/>
                                <small class="text-muted">@FileService.GetFileSize(new FileInfo(packedFilePath).Length)</small>
                            </div>
                            <button class="btn btn-primary" @onclick="() => DownloadFile(packedFilePath, Path.GetFileName(packedFilePath))">
                                üì• –°–∫–∞—á–∞—Ç—å .phyre —Ñ–∞–π–ª
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>üîß Template-based Packing</h6>
                            <ul>
                                <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É .phyre</li>
                                <li>–¢–æ—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞</li>
                                <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö</li>
                                <li>–ó–∞–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã</h6>
                            <ul>
                                <li><strong>BMFont:</strong> .fnt —Ñ–∞–π–ª—ã</li>
                                <li><strong>GTF:</strong> Sony GTF —Ç–µ–∫—Å—Ç—É—Ä—ã</li>
                                <li><strong>DDS:</strong> DirectDraw Surface</li>
                                <li><strong>PNG:</strong> –ê–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DDS</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string fntFilePath = string.Empty;
    private string fntFileName = string.Empty;
    private long fntFileSize = 0;
    private string textureFilePath = string.Empty;
    private string textureFileName = string.Empty;
    private long textureFileSize = 0;
    private string outputFileName = "font_modified.phyre";
    private bool autoConvertTexture = true;
    private bool isProcessing = false;
    private string resultOutput = string.Empty;
    private string resultError = string.Empty;
    private bool hasError = false;
    private string packedFilePath = string.Empty;

    private async Task OnFntFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                fntFilePath = await FileService.SaveBrowserFileAsync(e.File);
                fntFileName = e.File.Name;
                fntFileSize = e.File.Size;
                ClearResults();
            }
            catch (Exception ex)
            {
                resultError = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BMFont —Ñ–∞–π–ª–∞: {ex.Message}";
                hasError = true;
            }
        }
    }

    private async Task OnTextureFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                textureFilePath = await FileService.SaveBrowserFileAsync(e.File);
                textureFileName = e.File.Name;
                textureFileSize = e.File.Size;
                ClearResults();
            }
            catch (Exception ex)
            {
                resultError = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã: {ex.Message}";
                hasError = true;
            }
        }
    }

    private async Task StartPacking()
    {
        if (string.IsNullOrEmpty(fntFilePath) || string.IsNullOrEmpty(textureFilePath))
            return;

        isProcessing = true;
        ClearResults();

        try
        {
            var workingTexturePath = textureFilePath;

            // –ê–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PNG –≤ DDS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (autoConvertTexture && FileService.GetFileExtension(textureFileName) == ".png")
            {
                var ddsPath = Path.ChangeExtension(textureFilePath, ".dds");
                var convertResult = await PhyreService.ConvertToDDSAsync(textureFilePath, ddsPath);
                if (convertResult.Success)
                {
                    workingTexturePath = ddsPath;
                }
                else
                {
                    throw new Exception($"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PNG –≤ DDS: {convertResult.Error}");
                }
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            var outputPath = Path.Combine(Path.GetDirectoryName(fntFilePath)!, outputFileName);

            var result = await PhyreService.PackFontAsync(fntFilePath, workingTexturePath, outputPath);

            resultOutput = result.Output;
            resultError = result.Error;
            hasError = !result.Success;

            if (result.Success)
            {
                packedFilePath = outputPath;
            }
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø–∞–∫–æ–≤–∫–∏: {ex.Message}";
            hasError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DownloadFile(string filePath, string fileName)
    {
        try
        {
            var downloadUrl = await FileService.SaveDownloadFileAsync(filePath, fileName);
            await JSRuntime.InvokeVoidAsync("open", downloadUrl, "_blank");
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {ex.Message}";
            hasError = true;
        }
    }

    private void ClearResults()
    {
        resultOutput = string.Empty;
        resultError = string.Empty;
        hasError = false;
        packedFilePath = string.Empty;
    }
}

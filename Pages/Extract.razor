@page "/extract"
@using LZS_Web.Services
@inject PhyreEngineService PhyreService
@inject FileProcessingService FileService
@inject IJSRuntime JSRuntime
@inject ILogger<Extract> Logger

<PageTitle>Extract - LZS Phyre Engine Tool</PageTitle>

<div class="container-fluid">
    <h1>üì¶ Extract Phyre Files</h1>
    <p class="lead">–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤ –∏ —Ç–µ–∫—Å—Ç—É—Ä –∏–∑ .phyre —Ñ–∞–π–ª–æ–≤</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ .phyre —Ñ–∞–π–ª</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="@OnFileSelected" accept=".phyre" class="form-control" maxAllowedSize="100_000_000" />
                    
                    @* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è *@
                    <div class="mt-2">
                        <small class="text-muted">
                            Debug: uploadedFileName='@uploadedFileName', uploadedFilePath='@uploadedFilePath'
                        </small>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(uploadedFileName))
                    {
                        <div class="mt-3">
                            <div class="alert alert-success">
                                <strong>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:</strong> @uploadedFileName<br/>
                                <strong>–†–∞–∑–º–µ—Ä:</strong> @FileService.GetFileSize(uploadedFileSize)<br/>
                                <strong>–ü—É—Ç—å:</strong> @uploadedFilePath
                            </div>
                        </div>
                    }
                    
                    @if (hasError)
                    {
                        <div class="mt-3">
                            <div class="alert alert-danger">
                                <strong>–û—à–∏–±–∫–∞:</strong> @resultError
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(uploadedFilePath))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–≤–ª–µ—á–µ–Ω–∏—è</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label class="form-label">–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:</label>
                            <select @bind="extractionType" class="form-select">
                                <option value="texture">–ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç—É—Ä–∞ + —Å–∏–º–≤–æ–ª—ã)</option>
                                <option value="characters">–¢–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã</option>
                                <option value="analyze">–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</option>
                                <option value="finddata">–ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç–∞</option>
                            </select>
                        </div>

                        @if (extractionType == "characters")
                        {
                            <div class="row">
                                <div class="col-md-4">
                                    <label class="form-label">Offset:</label>
                                    <input type="number" @bind="charOffset" class="form-control" placeholder="3446" />
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Count:</label>
                                    <input type="number" @bind="charCount" class="form-control" placeholder="7447" />
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Size:</label>
                                    <input type="number" @bind="charSize" class="form-control" placeholder="45" />
                                </div>
                            </div>
                        }

                        <button class="btn btn-primary mt-3" @onclick="StartExtraction" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            –ù–∞—á–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-6">
            @if (isProcessing)
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                        </div>
                        <p class="mt-2">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(resultOutput))
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è</h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3 rounded">@resultOutput</pre>
                        
                        @if (hasError)
                        {
                            <div class="alert alert-danger mt-3">
                                <strong>–û—à–∏–±–∫–∞:</strong> @resultError
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success mt-3">
                                <strong>–£—Å–ø–µ—à–Ω–æ!</strong> –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
                            </div>
                        }
                    </div>
                </div>
            }

            @if (resultFiles.Any())
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>üìÅ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            @foreach (var file in resultFiles)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@file.Name</strong><br/>
                                        <small class="text-muted">@FileService.GetFileSize(file.Length)</small>
                                    </div>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => DownloadFile(file.FullName, file.Name)">
                                        üì• –°–∫–∞—á–∞—Ç—å
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏—è</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>üîß –ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (texture)</h6>
                            <ul>
                                <li>–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã (7447+)</li>
                                <li>–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</li>
                                <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ PNG</li>
                                <li>–°–æ–∑–¥–∞–µ—Ç BMFont (.fnt) –∏ JSON —Ñ–∞–π–ª—ã</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üìù –¢–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã (characters)</h6>
                            <ul>
                                <li>–¢—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è offset, count, size</li>
                                <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç–∞" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
                                <li>–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ .fnt –∏ .json —Ñ–∞–π–ª—ã</li>
                                <li>–î–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string uploadedFilePath = string.Empty;
    private string uploadedFileName = string.Empty;
    private long uploadedFileSize = 0;
    private string extractionType = "texture";
    private int charOffset = 3446;
    private int charCount = 7447;
    private int charSize = 45;
    private bool isProcessing = false;
    private string resultOutput = string.Empty;
    private string resultError = string.Empty;
    private bool hasError = false;
    private List<FileInfo> resultFiles = new();

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        Logger.LogInformation($"OnFileSelected called with file: {e.File?.Name}");
        
        if (e.File != null)
        {
            try
            {
                Logger.LogInformation($"Starting file upload: {e.File.Name}, size: {e.File.Size}");
                uploadedFilePath = await FileService.SaveBrowserFileAsync(e.File);
                uploadedFileName = e.File.Name;
                uploadedFileSize = e.File.Size;
                resultOutput = string.Empty;
                resultError = string.Empty;
                hasError = false;
                resultFiles.Clear();
                Logger.LogInformation($"File uploaded successfully to: {uploadedFilePath}");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error uploading file: {e.File.Name}");
                resultError = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {ex.Message}";
                hasError = true;
                StateHasChanged();
            }
        }
    }

    private async Task StartExtraction()
    {
        if (string.IsNullOrEmpty(uploadedFilePath))
            return;

        isProcessing = true;
        resultOutput = string.Empty;
        resultError = string.Empty;
        hasError = false;
        resultFiles.Clear();

        try
        {
            ProcessResult result;

            switch (extractionType)
            {
                case "texture":
                    result = await PhyreService.ExtractTextureAsync(uploadedFilePath);
                    break;
                case "characters":
                    result = await PhyreService.ExtractCharactersAsync(uploadedFilePath, charOffset, charCount, charSize);
                    break;
                case "analyze":
                    result = await PhyreService.AnalyzeFileAsync(uploadedFilePath);
                    break;
                case "finddata":
                    result = await PhyreService.FindFontDataAsync(uploadedFilePath);
                    break;
                default:
                    throw new ArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–∑–≤–ª–µ—á–µ–Ω–∏—è");
            }

            resultOutput = result.Output;
            resultError = result.Error;
            hasError = !result.Success;

            if (result.Success && extractionType != "analyze" && extractionType != "finddata")
            {
                var baseName = Path.GetFileNameWithoutExtension(uploadedFileName);
                resultFiles = FileService.GetResultFiles(baseName);
            }
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {ex.Message}";
            hasError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DownloadFile(string filePath, string fileName)
    {
        try
        {
            var downloadUrl = await FileService.SaveDownloadFileAsync(filePath, fileName);
            await JSRuntime.InvokeVoidAsync("open", downloadUrl, "_blank");
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {ex.Message}";
            hasError = true;
        }
    }
}

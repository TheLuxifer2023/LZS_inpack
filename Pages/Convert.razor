@page "/convert"
@using LZS_Web.Services
@inject PhyreEngineService PhyreService
@inject FileProcessingService FileService
@inject IJSRuntime JSRuntime

<PageTitle>Convert - LZS Phyre Engine Tool</PageTitle>

<div class="container-fluid">
    <h1>üîÑ Convert Textures</h1>
    <p class="lead">–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Ç–µ–∫—Å—Ç—É—Ä</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="@OnFileSelected" accept=".dds,.gtf,.png" class="form-control" maxAllowedSize="100_000_000" />
                    @if (!string.IsNullOrEmpty(fileName))
                    {
                        <div class="mt-3">
                            <div class="alert alert-success">
                                <strong>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:</strong> @fileName<br/>
                                <strong>–†–∞–∑–º–µ—Ä:</strong> @FileService.GetFileSize(fileSize)<br/>
                                <strong>–§–æ—Ä–º–∞—Ç:</strong> @FileService.GetFileExtension(fileName).ToUpper()
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(filePath))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label class="form-label">–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:</label>
                            <select @bind="conversionType" class="form-select">
                                <option value="topng">–í PNG (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)</option>
                                <option value="todds">–í DDS (–¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏)</option>
                            </select>
                        </div>

                        <div class="form-group mb-3">
                            <label class="form-label">–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:</label>
                            <input type="text" @bind="outputFileName" class="form-control" />
                        </div>

                        <button class="btn btn-primary" @onclick="StartConversion" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            –ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-6">
            @if (isProcessing)
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                        </div>
                        <p class="mt-2">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(resultOutput))
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3 rounded">@resultOutput</pre>
                        
                        @if (hasError)
                        {
                            <div class="alert alert-danger mt-3">
                                <strong>–û—à–∏–±–∫–∞:</strong> @resultError
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success mt-3">
                                <strong>–£—Å–ø–µ—à–Ω–æ!</strong> –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
                            </div>
                        }
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(convertedFilePath) && File.Exists(convertedFilePath))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>üìÅ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@Path.GetFileName(convertedFilePath)</strong><br/>
                                <small class="text-muted">@FileService.GetFileSize(new FileInfo(convertedFilePath).Length)</small>
                            </div>
                            <button class="btn btn-primary" @onclick="() => DownloadFile(convertedFilePath, Path.GetFileName(convertedFilePath))">
                                üì• –°–∫–∞—á–∞—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>üñºÔ∏è –í PNG</h6>
                            <ul>
                                <li><strong>GTF ‚Üí PNG:</strong> Sony GTF –≤ PNG –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
                                <li><strong>DDS ‚Üí PNG:</strong> DirectDraw Surface –≤ PNG</li>
                                <li><strong>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</strong> L8, DXT1, DXT5 —Ñ–æ—Ä–º–∞—Ç—ã</li>
                                <li><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</strong> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Photoshop/GIMP</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üì¶ –í DDS</h6>
                            <ul>
                                <li><strong>PNG ‚Üí DDS:</strong> PNG –≤ DDS L8 —Ñ–æ—Ä–º–∞—Ç</li>
                                <li><strong>–§–æ—Ä–º–∞—Ç:</strong> L8 (8-bit Luminance)</li>
                                <li><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</strong> –î–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –≤ .phyre</li>
                                <li><strong>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</strong> Phyre Engine</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string filePath = string.Empty;
    private string fileName = string.Empty;
    private long fileSize = 0;
    private string conversionType = "topng";
    private string outputFileName = string.Empty;
    private bool isProcessing = false;
    private string resultOutput = string.Empty;
    private string resultError = string.Empty;
    private bool hasError = false;
    private string convertedFilePath = string.Empty;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                filePath = await FileService.SaveBrowserFileAsync(e.File);
                fileName = e.File.Name;
                fileSize = e.File.Size;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                var baseName = Path.GetFileNameWithoutExtension(fileName);
                var extension = conversionType == "topng" ? ".png" : ".dds";
                outputFileName = $"{baseName}_converted{extension}";
                
                ClearResults();
            }
            catch (Exception ex)
            {
                resultError = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {ex.Message}";
                hasError = true;
            }
        }
    }

    private async Task StartConversion()
    {
        if (string.IsNullOrEmpty(filePath))
            return;

        isProcessing = true;
        ClearResults();

        try
        {
            var outputPath = Path.Combine(Path.GetDirectoryName(filePath)!, outputFileName);
            ProcessResult result;

            if (conversionType == "topng")
            {
                result = await PhyreService.ConvertToPNGAsync(filePath, outputPath);
            }
            else
            {
                result = await PhyreService.ConvertToDDSAsync(filePath, outputPath);
            }

            resultOutput = result.Output;
            resultError = result.Error;
            hasError = !result.Success;

            if (result.Success)
            {
                convertedFilePath = outputPath;
            }
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {ex.Message}";
            hasError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DownloadFile(string filePath, string fileName)
    {
        try
        {
            var downloadUrl = await FileService.SaveDownloadFileAsync(filePath, fileName);
            await JSRuntime.InvokeVoidAsync("open", downloadUrl, "_blank");
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {ex.Message}";
            hasError = true;
        }
    }

    private void ClearResults()
    {
        resultOutput = string.Empty;
        resultError = string.Empty;
        hasError = false;
        convertedFilePath = string.Empty;
    }
}

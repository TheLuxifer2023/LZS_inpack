@page "/analyze"
@using LZS_Web.Services
@inject PhyreEngineService PhyreService
@inject FileProcessingService FileService

<PageTitle>Analyze - LZS Phyre Engine Tool</PageTitle>

<div class="container-fluid">
    <h1>üîç Analyze Phyre Files</h1>
    <p class="lead">–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã .phyre —Ñ–∞–π–ª–æ–≤</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ .phyre —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="@OnFileSelected" accept=".phyre" class="form-control" maxAllowedSize="100_000_000" />
                    @if (!string.IsNullOrEmpty(fileName))
                    {
                        <div class="mt-3">
                            <div class="alert alert-success">
                                <strong>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:</strong> @fileName<br/>
                                <strong>–†–∞–∑–º–µ—Ä:</strong> @FileService.GetFileSize(fileSize)
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(filePath))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label class="form-label">–ê–Ω–∞–ª–∏–∑:</label>
                            <select @bind="analysisType" class="form-select">
                                <option value="analyze">–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</option>
                                <option value="finddata">–ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç–∞</option>
                                <option value="findsize">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</option>
                            </select>
                        </div>

                        @if (analysisType == "findsize")
                        {
                            <div class="form-group mb-3">
                                <label class="form-label">Offset:</label>
                                <input type="number" @bind="structOffset" class="form-control" placeholder="3446" />
                            </div>
                        }

                        <button class="btn btn-primary" @onclick="StartAnalysis" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-6">
            @if (isProcessing)
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üîÑ –ê–Ω–∞–ª–∏–∑...</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                        </div>
                        <p class="mt-2">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞...</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(resultOutput))
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3 rounded">@resultOutput</pre>
                        
                        @if (hasError)
                        {
                            <div class="alert alert-danger mt-3">
                                <strong>–û—à–∏–±–∫–∞:</strong> @resultError
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success mt-3">
                                <strong>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</strong>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üí° –¢–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6>üîç –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑</h6>
                            <ul>
                                <li>Magic bytes –∏ –≤–µ—Ä—Å–∏—è</li>
                                <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤</li>
                                <li>–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤</li>
                                <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤</li>
                                <li>Offsets –∏ —Ä–∞–∑–º–µ—Ä—ã</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6>üìù –ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç–∞</h6>
                            <ul>
                                <li>–ü–æ–∏—Å–∫ PBitmapFontCharInfo</li>
                                <li>–ê–±—Å–æ–ª—é—Ç–Ω—ã–π offset</li>
                                <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤</li>
                                <li>–†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</li>
                                <li>–ì–æ—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6>üìè –†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</h6>
                            <ul>
                                <li>–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤</li>
                                <li>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø–∏—Å–∏</li>
                                <li>–ü–µ—Ä–≤—ã–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª</li>
                                <li>–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</li>
                                <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string filePath = string.Empty;
    private string fileName = string.Empty;
    private long fileSize = 0;
    private string analysisType = "analyze";
    private int structOffset = 3446;
    private bool isProcessing = false;
    private string resultOutput = string.Empty;
    private string resultError = string.Empty;
    private bool hasError = false;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                filePath = await FileService.SaveBrowserFileAsync(e.File);
                fileName = e.File.Name;
                fileSize = e.File.Size;
                ClearResults();
            }
            catch (Exception ex)
            {
                resultError = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {ex.Message}";
                hasError = true;
            }
        }
    }

    private async Task StartAnalysis()
    {
        if (string.IsNullOrEmpty(filePath))
            return;

        isProcessing = true;
        ClearResults();

        try
        {
            ProcessResult result;

            switch (analysisType)
            {
                case "analyze":
                    result = await PhyreService.AnalyzeFileAsync(filePath);
                    break;
                case "finddata":
                    result = await PhyreService.FindFontDataAsync(filePath);
                    break;
                case "findsize":
                    result = await PhyreService.FindStructSizeAsync(filePath, structOffset);
                    break;
                default:
                    throw new ArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞");
            }

            resultOutput = result.Output;
            resultError = result.Error;
            hasError = !result.Success;
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {ex.Message}";
            hasError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ClearResults()
    {
        resultOutput = string.Empty;
        resultError = string.Empty;
        hasError = false;
    }
}

@page "/verify"
@using LZS_Web.Services
@inject PhyreEngineService PhyreService
@inject FileProcessingService FileService
@inject IJSRuntime JSRuntime

<PageTitle>Verify - LZS Phyre Engine Tool</PageTitle>

<div class="container-fluid">
    <h1>‚úÖ Verify Packed Files</h1>
    <p class="lead">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö .phyre —Ñ–∞–π–ª–æ–≤</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π .phyre —Ñ–∞–π–ª</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="@OnPackedFileSelected" accept=".phyre" class="form-control" maxAllowedSize="100_000_000" />
                    @if (!string.IsNullOrEmpty(packedFileName))
                    {
                        <div class="mt-3">
                            <div class="alert alert-success">
                                <strong>–£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:</strong> @packedFileName<br/>
                                <strong>–†–∞–∑–º–µ—Ä:</strong> @FileService.GetFileSize(packedFileSize)
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5>2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</h5>
                </div>
                <div class="card-body">
                    <InputFile OnChange="@OnOriginalFileSelected" accept=".phyre" class="form-control" maxAllowedSize="100_000_000" />
                    @if (!string.IsNullOrEmpty(originalFileName))
                    {
                        <div class="mt-3">
                            <div class="alert alert-info">
                                <strong>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:</strong> @originalFileName<br/>
                                <strong>–†–∞–∑–º–µ—Ä:</strong> @FileService.GetFileSize(originalFileSize)
                            </div>
                        </div>
                    }
                    <small class="text-muted">
                        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                    </small>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(packedFilePath))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é</h5>
                    </div>
                    <div class="card-body">
                        <button class="btn btn-primary" @onclick="StartVerification" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            –ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-6">
            @if (isProcessing)
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üîÑ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è...</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                        </div>
                        <p class="mt-2">–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(resultOutput))
            {
                <div class="card">
                    <div class="card-header">
                        <h5>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3 rounded">@resultOutput</pre>
                        
                        @if (hasError)
                        {
                            <div class="alert alert-danger mt-3">
                                <strong>–û—à–∏–±–∫–∞:</strong> @resultError
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success mt-3">
                                <strong>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</strong> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üîç –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞</h6>
                            <ul>
                                <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ magic bytes ('PHYR')</li>
                                <li>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ endianness –ø—Ä–æ–±–ª–µ–º</li>
                                <li>–í–∞–ª–∏–¥–∞—Ü–∏—è offsets –∏ counts</li>
                                <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä</h6>
                            <ul>
                                <li>PTexture2D —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</li>
                                <li>PBitmapFont –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã</li>
                                <li>PBitmapFontCharInfo –¥–∞–Ω–Ω—ã–µ</li>
                                <li>–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ä–∞–∑–º–µ—Ä–æ–≤</li>
                            </ul>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <h6>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h6>
                            <ul>
                                <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤</li>
                                <li>–î–∏–∞–ø–∞–∑–æ–Ω Unicode –∫–æ–¥–æ–≤</li>
                                <li>–ü–æ–∫—Ä—ã—Ç–∏–µ ASCII —Å–∏–º–≤–æ–ª–æ–≤</li>
                                <li>–ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º</h6>
                            <ul>
                                <li>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–∞–π—Ç –≤ –±–∞–π—Ç)</li>
                                <li>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã</li>
                                <li>–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è</li>
                                <li>–ö–∞—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–∫–∏</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string packedFilePath = string.Empty;
    private string packedFileName = string.Empty;
    private long packedFileSize = 0;
    private string originalFilePath = string.Empty;
    private string originalFileName = string.Empty;
    private long originalFileSize = 0;
    private bool isProcessing = false;
    private string resultOutput = string.Empty;
    private string resultError = string.Empty;
    private bool hasError = false;

    private async Task OnPackedFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                packedFilePath = await FileService.SaveBrowserFileAsync(e.File);
                packedFileName = e.File.Name;
                packedFileSize = e.File.Size;
                ClearResults();
            }
            catch (Exception ex)
            {
                resultError = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {ex.Message}";
                hasError = true;
            }
        }
    }

    private async Task OnOriginalFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                originalFilePath = await FileService.SaveBrowserFileAsync(e.File);
                originalFileName = e.File.Name;
                originalFileSize = e.File.Size;
                ClearResults();
            }
            catch (Exception ex)
            {
                resultError = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {ex.Message}";
                hasError = true;
            }
        }
    }

    private async Task StartVerification()
    {
        if (string.IsNullOrEmpty(packedFilePath))
            return;

        isProcessing = true;
        ClearResults();

        try
        {
            var originalPath = !string.IsNullOrEmpty(originalFilePath) ? originalFilePath : null;
            var result = await PhyreService.VerifyPackedFileAsync(packedFilePath, originalPath);

            resultOutput = result.Output;
            resultError = result.Error;
            hasError = !result.Success;
        }
        catch (Exception ex)
        {
            resultError = $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {ex.Message}";
            hasError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ClearResults()
    {
        resultOutput = string.Empty;
        resultError = string.Empty;
        hasError = false;
    }
}
